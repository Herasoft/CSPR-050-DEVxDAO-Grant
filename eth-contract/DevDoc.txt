{
	"methods": {
		"allowance(address,address)": {
			"details": "Get allowed amount for an account",
			"params": {
				"owner": "address The account owner",
				"spender": "address The account spender"
			}
		},
		"approve(address,uint256)": {
			"details": "Adds blacklisted check to approve",
			"return": "True if the operation was successful."
		},
		"balanceOf(address)": {
			"details": "Get token balance of an account",
			"params": {
				"account": "address The account"
			}
		},
		"blacklist(address)": {
			"details": "Adds account to blacklist",
			"params": {
				"_account": "The address to blacklist"
			}
		},
		"burn(uint256)": {
			"details": "allows a minter to burn some of its own tokens Validates that caller is a minter and that sender is not blacklisted amount is less than or equal to the minter's account balance",
			"params": {
				"_amount": "uint256 the amount of tokens to be burned"
			}
		},
		"configureMinter(address,uint256)": {
			"details": "Function to add/update a new minter",
			"params": {
				"minter": "The address of the minter",
				"minterAllowedAmount": "The minting amount allowed for the minter"
			},
			"return": "True if the operation was successful."
		},
		"decreaseAllowance(address,uint256)": {
			"details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
			"params": {
				"spender": "The address which will spend the funds.",
				"subtractedValue": "The amount of tokens to decrease the allowance by."
			}
		},
		"increaseAllowance(address,uint256)": {
			"details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
			"params": {
				"addedValue": "The amount of tokens to increase the allowance by.",
				"spender": "The address which will spend the funds."
			}
		},
		"isBlacklisted(address)": {
			"details": "Checks if account is blacklisted",
			"params": {
				"_account": "The address to check    "
			}
		},
		"isMinter(address)": {
			"details": "Checks if account is a minter",
			"params": {
				"account": "The address to check    "
			}
		},
		"isOwner()": {
			"return": "true if `msg.sender` is the owner of the contract."
		},
		"mint(address,uint256)": {
			"details": "Function to mint tokens",
			"params": {
				"_amount": "The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.",
				"_to": "The address that will receive the minted tokens."
			},
			"return": "A boolean that indicates if the operation was successful."
		},
		"minterAllowance(address)": {
			"details": "Get minter allowance for an account",
			"params": {
				"minter": "The address of the minter"
			}
		},
		"owner()": {
			"return": "the address of the owner."
		},
		"pause()": {
			"details": "called by the owner to pause, triggers stopped state"
		},
		"removeMinter(address)": {
			"details": "Function to remove a minter",
			"params": {
				"minter": "The address of the minter to remove"
			},
			"return": "True if the operation was successful."
		},
		"renounceOwnership()": {
			"details": "Allows the current owner to relinquish control of the contract."
		},
		"totalSupply()": {
			"details": "Get totalSupply of token"
		},
		"transfer(address,uint256)": {
			"details": "transfer token for a specified address",
			"params": {
				"_to": "The address to transfer to.",
				"_value": "The amount to be transferred."
			},
			"return": "bool success"
		},
		"transferFrom(address,address,uint256)": {
			"details": "Transfer tokens from one address to another.",
			"params": {
				"_from": "address The address which you want to send tokens from",
				"_to": "address The address which you want to transfer to",
				"_value": "uint256 the amount of tokens to be transferred"
			},
			"return": "bool success"
		},
		"transferOwnership(address)": {
			"details": "Allows the current owner to transfer control of the contract to a newOwner.",
			"params": {
				"newOwner": "The address to transfer ownership to."
			}
		},
		"unBlacklist(address)": {
			"details": "Removes account from blacklist",
			"params": {
				"_account": "The address to remove from the blacklist"
			}
		},
		"unpause()": {
			"details": "called by the owner to unpause, returns to normal state"
		},
		"updatePauser(address)": {
			"details": "update the pauser role"
		}
	}
}